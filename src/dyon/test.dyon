fn init(null, nill) {
	log("yipeee!")
	show_developer_tools(true)
}

// this code is run when someone walks up to the chicken and presses E
fn business_greeting(chicken, player) {

    c_cache := get_cache_entity(chicken)
	log("hey kid, bring me those melons!")


    // just logging some stats that'll
	// be fun to look at later.
    if !has(c_cache, "quests_launched") {
        c_cache.quests_launched := 0
    }
    c_cache.quests_launched += 1


	// if the quest isn't active, spawn the melos!
	if !has(c_cache, "quest_active") || !c_cache.quest_active {
		// all entities with that id!
		spawn_spots := all_with_id("spawn melo collectable")

		// at every spawn spot...
		for i len(spawn_spots) {
			// make a melo...
			melo := spawn_at_entity(spawn_spots[i], "melo")
			// and give it this scripting id
			add_id_entity(melo, "melo collectable")
		}

		// the game is now afoot!
		c_cache.quest_active := true

		// I'm just interested in seeing how many
		// melos will be collected over time.
		if !has(c_cache, "melos_collected") {
			c_cache.melos_collected := 0
		}
	}


	save_caches()
}

// this code is run when something slams into the chicken.
fn business_collide(chicken, melo) {

	// we need to get the chicken's data, that will tell us how
	// many melons they've collected so far.
    c_cache := get_cache_entity(chicken)


	// if what we've collided with is a melo,
	if has_id_entity(melo, "melo collectable") {
		log("om nom nom")
		// delete that bad boy
		delete_entity(melo)
		// log that!
		c_cache.melos_collected += 1

		// see if that's the last point they needed to win.
		if len(all_with_id("melo collectable")) == 0 {
			//woohoo!
			log("It's over, boys.")
			// this will the quest start over.
			c_cache.quest_active = false
		}
	}


	save_caches()
}
